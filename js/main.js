/** This is the main module */

/** Sets aliases */
let Application = PIXI.Application,
    Sprite = PIXI.Sprite,
    Graphics = PIXI.Graphics,
    Container = PIXI.Container,
    Text = PIXI.Text,
    Texture = PIXI.Texture,
    loader = PIXI.Loader.shared.loader;

let appWidth = window.innerWidth
let appHeight = window.innerHeight;
// let appWidth = 400;
// let appHeight = 400;

// initiate the application
let app = new Application({
    width: appWidth,
    height: appHeight,
    antialias: true,
    transparent: false,
    resolution: 1
});

// Fit the canvas perfectly into the screen.
app.renderer.view.style.position = "absolute";
app.renderer.view.style.display = "block";
app.renderer.autoDensity = true;

// Add the canvas generated by PIXI to the DOM.
document.body.appendChild(app.view);

// Globals
let startTime;
let foodSources = new Set();

/** Initiates game state by adding all default creatures */
let herbivores = new Set();
setup();
 
 /** Initiates game state by adding all default creatures */
 function setup() {
    // Initial Conditions
    const initialSourcesOfFood = 100;

    // add initial food entities.
    for (let i = 0; i < initialSourcesOfFood; i++) {
        let coordinates = generateRandomCoordinates();
        let food = new Food(coordinates.x, coordinates.y);
        foodSources.add(food);
        app.stage.addChild(food.body);
    }
    // add the initial creatures
    let coordinates = generateRandomCoordinates();
    let herbivore = new Herbivore(coordinates.x, coordinates.y);
    herbivores.add(herbivore);
    app.stage.addChild(herbivore.body);    

    app.ticker.add(delta => gameloop(delta));

    // Set the start time to now.
    startTime = new Date();

    // Start periodical tasks

    // Add food at an interval
    setInterval(function() {
        let randomCoordinates = generateRandomCoordinates();
        let food = new Food(randomCoordinates.x, randomCoordinates.y);
        foodSources.add(food);
        app.stage.addChild(food.body);
    }, 1000 * 1);
}

function gameloop() {
    
    for (let herbivore of herbivores) {
        herbivore.move();

        for (let food of foodSources) {
            if (eats(herbivore, food)) {
                app.stage.removeChild(food.body);
                foodSources.delete(food);
                herbivore.eat();
                if (herbivore.readyToReproduce()) {
                    herbivore.reproduce();
                    // Create a new herbivore
                    let newHerbivore = new Herbivore(herbivore.body.x, herbivore.body.y);
                    herbivores.add(newHerbivore);
                    app.stage.addChild(newHerbivore.body);
                }
            }
        }
    }    
}

/** Creates a food entity */
function Food(x, y) {
    this.body = createBody(x, y);

    function createBody(x, y) {
        let circle = new Graphics();
        let radius = 5;
        circle.beginFill(0x00FF00);
        circle.drawCircle(0, 0, radius);
        circle.endFill();
        circle.x = x;
        circle.y = y;
        return circle;
    }
}

/**
 * Creates a herbivore creature
 * @param {*} x horizontal coordinate
 * @param {*} y vertical coordinate
 */
function Herbivore(x, y) {
    this.radius = 10;
    this.body = createBody(x, y, this.radius);
    this.speed = 3;
    this.x_direction = 1;
    this.y_direction = 1;
    this.nourishment = 0;
    

    this.move = function() {
        // One a small chance change its direction.
        this.x_direction *= Math.random() > 0.95 ? -1 : 1;
        this.y_direction *= Math.random() > 0.95 ? -1 : 1;        

        let x_velocity = this.speed * this.x_direction;
        let y_velocity = this.speed * this.y_direction;

        let new_x_coordinate = this.body.x + x_velocity;
        let new_y_coordinate = this.body.y + y_velocity;

        // prevent the creature from going out of the screen by adjusting its velocity.
        if (new_x_coordinate <= 0) {
            x_velocity = Math.abs(x_velocity);
        }
        if (new_x_coordinate >= appWidth) {
            x_velocity = Math.abs(x_velocity) * -1;
        }
        if (new_y_coordinate <= 0) {
            y_velocity = Math.abs(y_velocity);
        }
        if (new_y_coordinate >= appHeight) {
            y_velocity = Math.abs(y_velocity) * -1;
        }

        this.body.x += x_velocity;
        this.body.y += y_velocity;
    }

    this.eat = function() {
        this.nourishment++;
    }
    
    this.readyToReproduce = function () {
        return this.nourishment >= 10;
    }
    
    this.reproduce = function () {
        this.nourishment = 0;
    }

    function createBody(x, y, radius) {
        let circle = new Graphics();
        circle.beginFill(0x0000FF);
        circle.drawCircle(0, 0, radius);
        circle.endFill();
        circle.x = x;
        circle.y = y;
        return circle;
    }
}
 
function generateRandomCoordinates() {
    return {        
        x: Math.floor(Math.random() * appWidth),
        y: Math.floor(Math.random() * appHeight)
    };
}

function eats(predator, prey) {
    let x_distance = predator.body.x - prey.body.x;
    let y_distance = predator.body.y - prey.body.y;
    let distance = Math.sqrt(x_distance * x_distance + y_distance * y_distance);
    return distance <= predator.radius;
}